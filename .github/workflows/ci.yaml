name: CI

on:
  push:
    branches:
      - master

env:
  DOCKER_REPO: docker.pkg.github.com/chiel/food

jobs:
  docker-lint:
    name: Lint Dockerfiles
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Lint Dockerfiles
        uses: docker://cdssnc/docker-lint-github-action

  install:
    name: Install dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Cache node modules
        uses: actions/cache@v1
        id: cache-dependencies
        with:
          path: node_modules
          key: ${{ runner.OS }}-dependencies-${{ hashFiles('yarn.lock') }}
      - name: Install dependencies
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: yarn

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: install
    steps:
      - uses: actions/checkout@v1
      - name: Cache node modules
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.OS }}-dependencies-${{ hashFiles('yarn.lock') }}
      - name: Lint
        run: yarn lint

  build-api:
    name: Build api
    runs-on: ubuntu-latest
    needs: install
    steps:
      - uses: actions/checkout@v1
      - name: Cache node modules
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.OS }}-dependencies-${{ hashFiles('yarn.lock') }}
      - name: Build api
        run: 'cd packages/api && yarn build'
      - uses: actions/upload-artifact@master
        with:
          name: api-build
          path: packages/api/dist

  docker-build-api:
    name: Build api Dockerfile
    runs-on: ubuntu-latest
    needs: build-api
    steps:
      - uses: actions/checkout@master
      - uses: actions/download-artifact@master
        with:
          name: api-build
          path: packages/api/dist
      - name: Build the image
        env:
          DOCKER_BUILDKIT: 1
        run: docker build --target prod -t $DOCKER_REPO/api:$GITHUB_SHA packages/api
      - name: Login to GPR
        run: |
          echo "${{ secrets.REGISTRY_TOKEN }}" | \
          docker login docker.pkg.github.com \
            -u "${{ secrets.REGISTRY_USER }}" \
            --password-stdin
      - name: Push image to GPR
        run: docker push $DOCKER_REPO/api:$GITHUB_SHA

  build-app:
    name: Build app
    runs-on: ubuntu-latest
    needs: install
    steps:
      - uses: actions/checkout@v1
      - name: Cache node modules
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.OS }}-dependencies-${{ hashFiles('yarn.lock') }}
      - name: Build app
        run: 'cd packages/app && yarn build'
      - uses: actions/upload-artifact@master
        with:
          name: app-build
          path: packages/app/dist

  docker-build-app:
    name: Build app Dockerfile
    runs-on: ubuntu-latest
    needs: build-app
    steps:
      - uses: actions/checkout@master
      - uses: actions/download-artifact@master
        with:
          name: app-build
          path: packages/app/dist
      - name: Build the image
        env:
          DOCKER_BUILDKIT: 1
        run: docker build --target prod -t $DOCKER_REPO/app:$GITHUB_SHA packages/app
      - name: Login to GPR
        run: |
          echo "${{ secrets.REGISTRY_TOKEN }}" | \
          docker login docker.pkg.github.com \
            -u "${{ secrets.REGISTRY_USER }}" \
            --password-stdin
      - name: Push image to GPR
        run: docker push $DOCKER_REPO/app:$GITHUB_SHA

  kubernetes-deploy:
    name: Apply kubernetes manifests
    runs-on: ubuntu-latest
    needs:
      - docker-build-api
      - docker-build-app
    steps:
      - uses: actions/checkout@master
      - name: Concatenate kubernetes config templates
        run: cat packages/*/.k8s.template.yaml > .k8s.template.yaml
      - name: Generate kubernetes config
        env:
          AUTH_GOOGLE_CLIENT_SECRET: ${{ secrets.AUTH_GOOGLE_CLIENT_SECRET }}
        run: envsubst < .k8s.template.yaml > .k8s.yaml
      - name: Save DigitalOcean kubeconfig
        uses: digitalocean/action-doctl@master
        env:
          DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
        with:
          args: kubernetes cluster kubeconfig show main > .kubeconfig
      - name: Apply kubernetes config
        uses: docker://lachlanevenson/k8s-kubectl
        with:
          args: --kubeconfig=.kubeconfig apply -f .k8s.yaml
